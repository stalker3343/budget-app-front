{
    "openapi": "3.0.0",
    "info": {
        "title": "nocodb",
        "version": "2.0"
    },
    "servers": [
        {
            "url": "http://147.45.103.13:8080"
        },
        {
            "url": "{customUrl}",
            "variables": {
                "customUrl": {
                    "default": "http://147.45.103.13:8080",
                    "description": "Provide custom nocodb app base url"
                }
            }
        }
    ],
    "paths": {
        "/api/v2/tables/miugo4hlloysiy1/records": {
            "get": {
                "summary": "Accounts list",
                "operationId": "accounts-db-table-row-list",
                "description": "List of all rows from Accounts table and response data fields can be filtered based on query params.",
                "tags": [
                    "Accounts"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string",
                            "enum": [
                                "vww19un32khecp1p"
                            ]
                        },
                        "description": "Allows you to fetch records that are currently visible within a specific view.\n\nViews:\n* vww19un32khecp1p - Default view",
                        "name": "viewId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1
                        },
                        "in": "query",
                        "name": "shuffle",
                        "description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
                        "example": 0
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "nested[Users][fields]",
                        "description": "Array of field names or comma separated filed names to include in the in nested column `Users` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Users][fields]=field1,field2`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AccountsResponse"
                                            }
                                        },
                                        "PageInfo": {
                                            "$ref": "#/components/schemas/Paginated"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Accounts create",
                "description": "Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value.",
                "operationId": "accounts-create",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "tags": [
                    "Accounts"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/AccountsRequest"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/AccountsRequest"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Accounts update",
                "operationId": "accounts-update",
                "description": "Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "tags": [
                    "Accounts"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/AccountsRequest"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/AccountsRequest"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Accounts delete",
                "operationId": "accounts-delete",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "Accounts"
                ],
                "description": "Delete a row by using the **primary key** column value.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/AccountsIdRequest"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/AccountsIdRequest"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/tables/miugo4hlloysiy1/records/{recordId}": {
            "get": {
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "name": "recordId",
                        "in": "path",
                        "required": true,
                        "example": 1,
                        "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    }
                ],
                "summary": "Accounts read",
                "description": "Read a row data by using the **primary key** column value.",
                "operationId": "accounts-read",
                "tags": [
                    "Accounts"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountsResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/tables/miugo4hlloysiy1/records/count": {
            "parameters": [
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "vww19un32khecp1p"
                        ]
                    },
                    "description": "Allows you to fetch records that are currently visible within a specific view.\n\nViews:\n* vww19un32khecp1p - Default view",
                    "name": "viewId",
                    "in": "query",
                    "required": false
                }
            ],
            "get": {
                "summary": "Accounts count",
                "operationId": "accounts-count",
                "description": "Get rows count of a table by applying optional filters.",
                "tags": [
                    "Accounts"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "count": {
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "list",
                                        "pageInfo"
                                    ]
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "count": 3
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                }
            }
        },
        "/api/v2/tables/miugo4hlloysiy1/links/{linkFieldId}/records/{recordId}": {
            "parameters": [
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "cuhfurr47re3nwh",
                            "cb6lv6kghix9r5j"
                        ]
                    },
                    "name": "linkFieldId",
                    "in": "path",
                    "required": true,
                    "description": "**Links Field Identifier** corresponding to the relation field `Links` established between tables.\n\nLink Columns:\n* cuhfurr47re3nwh - Transactions\n* cb6lv6kghix9r5j - Users"
                },
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "recordId",
                    "in": "path",
                    "required": true,
                    "example": 1,
                    "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                }
            ],
            "get": {
                "summary": "Link Records list",
                "operationId": "accounts-nested-list",
                "description": "This API endpoint allows you to retrieve list of linked records for a specific `Link field` and `Record ID`. The response is an array of objects containing Primary Key and its corresponding display value.",
                "tags": [
                    "Accounts"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "list": {
                                            "type": "array",
                                            "description": "List of data objects",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "pageInfo": {
                                            "$ref": "#/components/schemas/Paginated",
                                            "description": "Paginated Info"
                                        }
                                    },
                                    "required": [
                                        "list",
                                        "pageInfo"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                }
            },
            "post": {
                "summary": "Link Records",
                "operationId": "accounts-nested-link",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "examples": {
                                    "Example 1": {
                                        "value": true
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "tags": [
                    "Accounts"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "object"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "type": "object"
                                        }
                                    }
                                ]
                            },
                            "examples": {
                                "Example 1": {
                                    "value": [
                                        {
                                            "Id": 4
                                        },
                                        {
                                            "Id": 5
                                        }
                                    ]
                                },
                                "Example 2": {
                                    "value": {
                                        "Id": 4
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "This API endpoint allows you to link records to a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for linking purposes. Note that any existing links, if present, will be unaffected during this operation.",
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "name": "recordId",
                        "in": "path",
                        "required": true,
                        "example": 1,
                        "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                    }
                ]
            },
            "delete": {
                "summary": "Unlink Records",
                "operationId": "accounts-nested-unlink",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "examples": {
                                    "Example 1": {
                                        "value": true
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "tags": [
                    "Accounts"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "array",
                                        "items": {
                                            "type": "object"
                                        }
                                    }
                                ]
                            },
                            "examples": {
                                "Example 1": {
                                    "value": [
                                        {
                                            "Id": 1
                                        },
                                        {
                                            "Id": 2
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "This API endpoint allows you to unlink records from a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for unlinking purposes. Note that, \n- duplicated record-ids will be ignored.\n- non-existent record-ids will be ignored.",
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "name": "recordId",
                        "in": "path",
                        "required": true,
                        "example": 1,
                        "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                    }
                ]
            }
        },
        "/api/v2/tables/mu8j9kxmnjndm93/records": {
            "get": {
                "summary": "Budgets list",
                "operationId": "budgets-db-table-row-list",
                "description": "List of all rows from Budgets table and response data fields can be filtered based on query params.",
                "tags": [
                    "Budgets"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string",
                            "enum": [
                                "vway9kxplqivnvir"
                            ]
                        },
                        "description": "Allows you to fetch records that are currently visible within a specific view.\n\nViews:\n* vway9kxplqivnvir - Default view",
                        "name": "viewId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1
                        },
                        "in": "query",
                        "name": "shuffle",
                        "description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
                        "example": 0
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "nested[Categories][fields]",
                        "description": "Array of field names or comma separated filed names to include in the in nested column `Categories` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Categories][fields]=field1,field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "nested[Users][fields]",
                        "description": "Array of field names or comma separated filed names to include in the in nested column `Users` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Users][fields]=field1,field2`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/BudgetsResponse"
                                            }
                                        },
                                        "PageInfo": {
                                            "$ref": "#/components/schemas/Paginated"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Budgets create",
                "description": "Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value.",
                "operationId": "budgets-create",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BudgetsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "tags": [
                    "Budgets"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/BudgetsRequest"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/BudgetsRequest"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Budgets update",
                "operationId": "budgets-update",
                "description": "Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "tags": [
                    "Budgets"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/BudgetsRequest"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/BudgetsRequest"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Budgets delete",
                "operationId": "budgets-delete",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "Budgets"
                ],
                "description": "Delete a row by using the **primary key** column value.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/BudgetsIdRequest"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/BudgetsIdRequest"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/tables/mu8j9kxmnjndm93/records/{recordId}": {
            "get": {
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "name": "recordId",
                        "in": "path",
                        "required": true,
                        "example": 1,
                        "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    }
                ],
                "summary": "Budgets read",
                "description": "Read a row data by using the **primary key** column value.",
                "operationId": "budgets-read",
                "tags": [
                    "Budgets"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BudgetsResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/tables/mu8j9kxmnjndm93/records/count": {
            "parameters": [
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "vway9kxplqivnvir"
                        ]
                    },
                    "description": "Allows you to fetch records that are currently visible within a specific view.\n\nViews:\n* vway9kxplqivnvir - Default view",
                    "name": "viewId",
                    "in": "query",
                    "required": false
                }
            ],
            "get": {
                "summary": "Budgets count",
                "operationId": "budgets-count",
                "description": "Get rows count of a table by applying optional filters.",
                "tags": [
                    "Budgets"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "count": {
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "list",
                                        "pageInfo"
                                    ]
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "count": 3
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                }
            }
        },
        "/api/v2/tables/mu8j9kxmnjndm93/links/{linkFieldId}/records/{recordId}": {
            "parameters": [
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "chsmgss10zgczgc",
                            "cz2qknulr44jg4o"
                        ]
                    },
                    "name": "linkFieldId",
                    "in": "path",
                    "required": true,
                    "description": "**Links Field Identifier** corresponding to the relation field `Links` established between tables.\n\nLink Columns:\n* chsmgss10zgczgc - Categories\n* cz2qknulr44jg4o - Users"
                },
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "recordId",
                    "in": "path",
                    "required": true,
                    "example": 1,
                    "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                }
            ],
            "get": {
                "summary": "Link Records list",
                "operationId": "budgets-nested-list",
                "description": "This API endpoint allows you to retrieve list of linked records for a specific `Link field` and `Record ID`. The response is an array of objects containing Primary Key and its corresponding display value.",
                "tags": [
                    "Budgets"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "list": {
                                            "type": "array",
                                            "description": "List of data objects",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "pageInfo": {
                                            "$ref": "#/components/schemas/Paginated",
                                            "description": "Paginated Info"
                                        }
                                    },
                                    "required": [
                                        "list",
                                        "pageInfo"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                }
            },
            "post": {
                "summary": "Link Records",
                "operationId": "budgets-nested-link",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "examples": {
                                    "Example 1": {
                                        "value": true
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "tags": [
                    "Budgets"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "object"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "type": "object"
                                        }
                                    }
                                ]
                            },
                            "examples": {
                                "Example 1": {
                                    "value": [
                                        {
                                            "Id": 4
                                        },
                                        {
                                            "Id": 5
                                        }
                                    ]
                                },
                                "Example 2": {
                                    "value": {
                                        "Id": 4
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "This API endpoint allows you to link records to a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for linking purposes. Note that any existing links, if present, will be unaffected during this operation.",
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "name": "recordId",
                        "in": "path",
                        "required": true,
                        "example": 1,
                        "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                    }
                ]
            },
            "delete": {
                "summary": "Unlink Records",
                "operationId": "budgets-nested-unlink",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "examples": {
                                    "Example 1": {
                                        "value": true
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "tags": [
                    "Budgets"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "array",
                                        "items": {
                                            "type": "object"
                                        }
                                    }
                                ]
                            },
                            "examples": {
                                "Example 1": {
                                    "value": [
                                        {
                                            "Id": 1
                                        },
                                        {
                                            "Id": 2
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "This API endpoint allows you to unlink records from a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for unlinking purposes. Note that, \n- duplicated record-ids will be ignored.\n- non-existent record-ids will be ignored.",
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "name": "recordId",
                        "in": "path",
                        "required": true,
                        "example": 1,
                        "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                    }
                ]
            }
        },
        "/api/v2/tables/ms4nmdy7sg6dqv5/records": {
            "get": {
                "summary": "Categories list",
                "operationId": "categories-db-table-row-list",
                "description": "List of all rows from Categories table and response data fields can be filtered based on query params.",
                "tags": [
                    "Categories"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string",
                            "enum": [
                                "vwqyzpx6bj9qw982"
                            ]
                        },
                        "description": "Allows you to fetch records that are currently visible within a specific view.\n\nViews:\n* vwqyzpx6bj9qw982 - Default view",
                        "name": "viewId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1
                        },
                        "in": "query",
                        "name": "shuffle",
                        "description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
                        "example": 0
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "nested[Categories][fields]",
                        "description": "Array of field names or comma separated filed names to include in the in nested column `Categories` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Categories][fields]=field1,field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "nested[Users][fields]",
                        "description": "Array of field names or comma separated filed names to include in the in nested column `Users` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Users][fields]=field1,field2`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CategoriesResponse"
                                            }
                                        },
                                        "PageInfo": {
                                            "$ref": "#/components/schemas/Paginated"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Categories create",
                "description": "Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value.",
                "operationId": "categories-create",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoriesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "tags": [
                    "Categories"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/CategoriesRequest"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/CategoriesRequest"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Categories update",
                "operationId": "categories-update",
                "description": "Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "tags": [
                    "Categories"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/CategoriesRequest"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/CategoriesRequest"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Categories delete",
                "operationId": "categories-delete",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "Categories"
                ],
                "description": "Delete a row by using the **primary key** column value.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/CategoriesIdRequest"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/CategoriesIdRequest"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/tables/ms4nmdy7sg6dqv5/records/{recordId}": {
            "get": {
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "name": "recordId",
                        "in": "path",
                        "required": true,
                        "example": 1,
                        "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    }
                ],
                "summary": "Categories read",
                "description": "Read a row data by using the **primary key** column value.",
                "operationId": "categories-read",
                "tags": [
                    "Categories"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoriesResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/tables/ms4nmdy7sg6dqv5/records/count": {
            "parameters": [
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "vwqyzpx6bj9qw982"
                        ]
                    },
                    "description": "Allows you to fetch records that are currently visible within a specific view.\n\nViews:\n* vwqyzpx6bj9qw982 - Default view",
                    "name": "viewId",
                    "in": "query",
                    "required": false
                }
            ],
            "get": {
                "summary": "Categories count",
                "operationId": "categories-count",
                "description": "Get rows count of a table by applying optional filters.",
                "tags": [
                    "Categories"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "count": {
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "list",
                                        "pageInfo"
                                    ]
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "count": 3
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                }
            }
        },
        "/api/v2/tables/ms4nmdy7sg6dqv5/links/{linkFieldId}/records/{recordId}": {
            "parameters": [
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "cw3aplm25glomjd",
                            "c4gqq5uzyd1fmju",
                            "cfav4udgettp9nw",
                            "cj42tx1whznj7kb",
                            "cr304psfki4goet",
                            "c5k5vtnlpkfezig"
                        ]
                    },
                    "name": "linkFieldId",
                    "in": "path",
                    "required": true,
                    "description": "**Links Field Identifier** corresponding to the relation field `Links` established between tables.\n\nLink Columns:\n* cw3aplm25glomjd - Transactions\n* c4gqq5uzyd1fmju - Categories\n* cfav4udgettp9nw - Categories\n* cj42tx1whznj7kb - Budgets\n* cr304psfki4goet - Users\n* c5k5vtnlpkfezig - Transactions"
                },
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "recordId",
                    "in": "path",
                    "required": true,
                    "example": 1,
                    "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                }
            ],
            "get": {
                "summary": "Link Records list",
                "operationId": "categories-nested-list",
                "description": "This API endpoint allows you to retrieve list of linked records for a specific `Link field` and `Record ID`. The response is an array of objects containing Primary Key and its corresponding display value.",
                "tags": [
                    "Categories"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "list": {
                                            "type": "array",
                                            "description": "List of data objects",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "pageInfo": {
                                            "$ref": "#/components/schemas/Paginated",
                                            "description": "Paginated Info"
                                        }
                                    },
                                    "required": [
                                        "list",
                                        "pageInfo"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                }
            },
            "post": {
                "summary": "Link Records",
                "operationId": "categories-nested-link",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "examples": {
                                    "Example 1": {
                                        "value": true
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "tags": [
                    "Categories"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "object"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "type": "object"
                                        }
                                    }
                                ]
                            },
                            "examples": {
                                "Example 1": {
                                    "value": [
                                        {
                                            "Id": 4
                                        },
                                        {
                                            "Id": 5
                                        }
                                    ]
                                },
                                "Example 2": {
                                    "value": {
                                        "Id": 4
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "This API endpoint allows you to link records to a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for linking purposes. Note that any existing links, if present, will be unaffected during this operation.",
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "name": "recordId",
                        "in": "path",
                        "required": true,
                        "example": 1,
                        "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                    }
                ]
            },
            "delete": {
                "summary": "Unlink Records",
                "operationId": "categories-nested-unlink",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "examples": {
                                    "Example 1": {
                                        "value": true
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "tags": [
                    "Categories"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "array",
                                        "items": {
                                            "type": "object"
                                        }
                                    }
                                ]
                            },
                            "examples": {
                                "Example 1": {
                                    "value": [
                                        {
                                            "Id": 1
                                        },
                                        {
                                            "Id": 2
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "This API endpoint allows you to unlink records from a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for unlinking purposes. Note that, \n- duplicated record-ids will be ignored.\n- non-existent record-ids will be ignored.",
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "name": "recordId",
                        "in": "path",
                        "required": true,
                        "example": 1,
                        "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                    }
                ]
            }
        },
        "/api/v2/tables/mjxico9qnz0lhxv/records": {
            "get": {
                "summary": "Debts list",
                "operationId": "debts-db-table-row-list",
                "description": "List of all rows from Debts table and response data fields can be filtered based on query params.",
                "tags": [
                    "Debts"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string",
                            "enum": [
                                "vwytsja61nuhtki3"
                            ]
                        },
                        "description": "Allows you to fetch records that are currently visible within a specific view.\n\nViews:\n* vwytsja61nuhtki3 - Default view",
                        "name": "viewId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1
                        },
                        "in": "query",
                        "name": "shuffle",
                        "description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
                        "example": 0
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "nested[Users][fields]",
                        "description": "Array of field names or comma separated filed names to include in the in nested column `Users` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Users][fields]=field1,field2`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/DebtsResponse"
                                            }
                                        },
                                        "PageInfo": {
                                            "$ref": "#/components/schemas/Paginated"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Debts create",
                "description": "Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value.",
                "operationId": "debts-create",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DebtsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "tags": [
                    "Debts"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/DebtsRequest"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/DebtsRequest"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Debts update",
                "operationId": "debts-update",
                "description": "Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "tags": [
                    "Debts"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/DebtsRequest"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/DebtsRequest"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Debts delete",
                "operationId": "debts-delete",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "Debts"
                ],
                "description": "Delete a row by using the **primary key** column value.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/DebtsIdRequest"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/DebtsIdRequest"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/tables/mjxico9qnz0lhxv/records/{recordId}": {
            "get": {
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "name": "recordId",
                        "in": "path",
                        "required": true,
                        "example": 1,
                        "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    }
                ],
                "summary": "Debts read",
                "description": "Read a row data by using the **primary key** column value.",
                "operationId": "debts-read",
                "tags": [
                    "Debts"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DebtsResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/tables/mjxico9qnz0lhxv/records/count": {
            "parameters": [
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "vwytsja61nuhtki3"
                        ]
                    },
                    "description": "Allows you to fetch records that are currently visible within a specific view.\n\nViews:\n* vwytsja61nuhtki3 - Default view",
                    "name": "viewId",
                    "in": "query",
                    "required": false
                }
            ],
            "get": {
                "summary": "Debts count",
                "operationId": "debts-count",
                "description": "Get rows count of a table by applying optional filters.",
                "tags": [
                    "Debts"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "count": {
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "list",
                                        "pageInfo"
                                    ]
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "count": 3
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                }
            }
        },
        "/api/v2/tables/mjxico9qnz0lhxv/links/{linkFieldId}/records/{recordId}": {
            "parameters": [
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "cpwzzc4sfe9aid3"
                        ]
                    },
                    "name": "linkFieldId",
                    "in": "path",
                    "required": true,
                    "description": "**Links Field Identifier** corresponding to the relation field `Links` established between tables.\n\nLink Columns:\n* cpwzzc4sfe9aid3 - Users"
                },
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "recordId",
                    "in": "path",
                    "required": true,
                    "example": 1,
                    "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                }
            ],
            "get": {
                "summary": "Link Records list",
                "operationId": "debts-nested-list",
                "description": "This API endpoint allows you to retrieve list of linked records for a specific `Link field` and `Record ID`. The response is an array of objects containing Primary Key and its corresponding display value.",
                "tags": [
                    "Debts"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "list": {
                                            "type": "array",
                                            "description": "List of data objects",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "pageInfo": {
                                            "$ref": "#/components/schemas/Paginated",
                                            "description": "Paginated Info"
                                        }
                                    },
                                    "required": [
                                        "list",
                                        "pageInfo"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                }
            },
            "post": {
                "summary": "Link Records",
                "operationId": "debts-nested-link",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "examples": {
                                    "Example 1": {
                                        "value": true
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "tags": [
                    "Debts"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "object"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "type": "object"
                                        }
                                    }
                                ]
                            },
                            "examples": {
                                "Example 1": {
                                    "value": [
                                        {
                                            "Id": 4
                                        },
                                        {
                                            "Id": 5
                                        }
                                    ]
                                },
                                "Example 2": {
                                    "value": {
                                        "Id": 4
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "This API endpoint allows you to link records to a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for linking purposes. Note that any existing links, if present, will be unaffected during this operation.",
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "name": "recordId",
                        "in": "path",
                        "required": true,
                        "example": 1,
                        "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                    }
                ]
            },
            "delete": {
                "summary": "Unlink Records",
                "operationId": "debts-nested-unlink",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "examples": {
                                    "Example 1": {
                                        "value": true
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "tags": [
                    "Debts"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "array",
                                        "items": {
                                            "type": "object"
                                        }
                                    }
                                ]
                            },
                            "examples": {
                                "Example 1": {
                                    "value": [
                                        {
                                            "Id": 1
                                        },
                                        {
                                            "Id": 2
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "This API endpoint allows you to unlink records from a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for unlinking purposes. Note that, \n- duplicated record-ids will be ignored.\n- non-existent record-ids will be ignored.",
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "name": "recordId",
                        "in": "path",
                        "required": true,
                        "example": 1,
                        "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                    }
                ]
            }
        },
        "/api/v2/tables/mtv84l6c6o26vgf/records": {
            "get": {
                "summary": "Transactions list",
                "operationId": "transactions-db-table-row-list",
                "description": "List of all rows from Transactions table and response data fields can be filtered based on query params.",
                "tags": [
                    "Transactions"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string",
                            "enum": [
                                "vwfnsf4hxgqicpk3"
                            ]
                        },
                        "description": "Allows you to fetch records that are currently visible within a specific view.\n\nViews:\n* vwfnsf4hxgqicpk3 - Default view",
                        "name": "viewId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1
                        },
                        "in": "query",
                        "name": "shuffle",
                        "description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
                        "example": 0
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "nested[Accounts][fields]",
                        "description": "Array of field names or comma separated filed names to include in the in nested column `Accounts` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Accounts][fields]=field1,field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "nested[Categories][fields]",
                        "description": "Array of field names or comma separated filed names to include in the in nested column `Categories` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Categories][fields]=field1,field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "nested[Categories][fields]",
                        "description": "Array of field names or comma separated filed names to include in the in nested column `Categories` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Categories][fields]=field1,field2`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TransactionsResponse"
                                            }
                                        },
                                        "PageInfo": {
                                            "$ref": "#/components/schemas/Paginated"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Transactions create",
                "description": "Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value.",
                "operationId": "transactions-create",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "tags": [
                    "Transactions"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/TransactionsRequest"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/TransactionsRequest"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Transactions update",
                "operationId": "transactions-update",
                "description": "Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "tags": [
                    "Transactions"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/TransactionsRequest"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/TransactionsRequest"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Transactions delete",
                "operationId": "transactions-delete",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "Transactions"
                ],
                "description": "Delete a row by using the **primary key** column value.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/TransactionsIdRequest"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/TransactionsIdRequest"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/tables/mtv84l6c6o26vgf/records/{recordId}": {
            "get": {
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "name": "recordId",
                        "in": "path",
                        "required": true,
                        "example": 1,
                        "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    }
                ],
                "summary": "Transactions read",
                "description": "Read a row data by using the **primary key** column value.",
                "operationId": "transactions-read",
                "tags": [
                    "Transactions"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionsResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/tables/mtv84l6c6o26vgf/records/count": {
            "parameters": [
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "vwfnsf4hxgqicpk3"
                        ]
                    },
                    "description": "Allows you to fetch records that are currently visible within a specific view.\n\nViews:\n* vwfnsf4hxgqicpk3 - Default view",
                    "name": "viewId",
                    "in": "query",
                    "required": false
                }
            ],
            "get": {
                "summary": "Transactions count",
                "operationId": "transactions-count",
                "description": "Get rows count of a table by applying optional filters.",
                "tags": [
                    "Transactions"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "count": {
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "list",
                                        "pageInfo"
                                    ]
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "count": 3
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                }
            }
        },
        "/api/v2/tables/mtv84l6c6o26vgf/links/{linkFieldId}/records/{recordId}": {
            "parameters": [
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "ccfz0n80u7lsg1f",
                            "ctjbax3dzk44clh",
                            "cgyn6ng71g9rvoa"
                        ]
                    },
                    "name": "linkFieldId",
                    "in": "path",
                    "required": true,
                    "description": "**Links Field Identifier** corresponding to the relation field `Links` established between tables.\n\nLink Columns:\n* ccfz0n80u7lsg1f - Accounts\n* ctjbax3dzk44clh - Categories\n* cgyn6ng71g9rvoa - Categories"
                },
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "recordId",
                    "in": "path",
                    "required": true,
                    "example": 1,
                    "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                }
            ],
            "get": {
                "summary": "Link Records list",
                "operationId": "transactions-nested-list",
                "description": "This API endpoint allows you to retrieve list of linked records for a specific `Link field` and `Record ID`. The response is an array of objects containing Primary Key and its corresponding display value.",
                "tags": [
                    "Transactions"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "list": {
                                            "type": "array",
                                            "description": "List of data objects",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "pageInfo": {
                                            "$ref": "#/components/schemas/Paginated",
                                            "description": "Paginated Info"
                                        }
                                    },
                                    "required": [
                                        "list",
                                        "pageInfo"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                }
            },
            "post": {
                "summary": "Link Records",
                "operationId": "transactions-nested-link",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "examples": {
                                    "Example 1": {
                                        "value": true
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "tags": [
                    "Transactions"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "object"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "type": "object"
                                        }
                                    }
                                ]
                            },
                            "examples": {
                                "Example 1": {
                                    "value": [
                                        {
                                            "Id": 4
                                        },
                                        {
                                            "Id": 5
                                        }
                                    ]
                                },
                                "Example 2": {
                                    "value": {
                                        "Id": 4
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "This API endpoint allows you to link records to a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for linking purposes. Note that any existing links, if present, will be unaffected during this operation.",
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "name": "recordId",
                        "in": "path",
                        "required": true,
                        "example": 1,
                        "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                    }
                ]
            },
            "delete": {
                "summary": "Unlink Records",
                "operationId": "transactions-nested-unlink",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "examples": {
                                    "Example 1": {
                                        "value": true
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "tags": [
                    "Transactions"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "array",
                                        "items": {
                                            "type": "object"
                                        }
                                    }
                                ]
                            },
                            "examples": {
                                "Example 1": {
                                    "value": [
                                        {
                                            "Id": 1
                                        },
                                        {
                                            "Id": 2
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "This API endpoint allows you to unlink records from a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for unlinking purposes. Note that, \n- duplicated record-ids will be ignored.\n- non-existent record-ids will be ignored.",
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "name": "recordId",
                        "in": "path",
                        "required": true,
                        "example": 1,
                        "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                    }
                ]
            }
        },
        "/api/v2/tables/m2768vsp576x4sr/records": {
            "get": {
                "summary": "AccountBalances list",
                "operationId": "accountbalances-db-table-row-list",
                "description": "List of all rows from AccountBalances view and response data fields can be filtered based on query params.",
                "tags": [
                    "AccountBalances"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string",
                            "enum": [
                                "vw7cn9e0z2isrbx1"
                            ]
                        },
                        "description": "Allows you to fetch records that are currently visible within a specific view.\n\nViews:\n* vw7cn9e0z2isrbx1 - Default view",
                        "name": "viewId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1
                        },
                        "in": "query",
                        "name": "shuffle",
                        "description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
                        "example": 0
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AccountBalancesResponse"
                                            }
                                        },
                                        "PageInfo": {
                                            "$ref": "#/components/schemas/Paginated"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/tables/m2768vsp576x4sr/records/{recordId}": {
            "get": {
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "name": "recordId",
                        "in": "path",
                        "required": true,
                        "example": 1,
                        "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    }
                ],
                "summary": "AccountBalances read",
                "description": "Read a row data by using the **primary key** column value.",
                "operationId": "accountbalances-read",
                "tags": [
                    "AccountBalances"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountBalancesResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/tables/m2768vsp576x4sr/records/count": {
            "parameters": [
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "vw7cn9e0z2isrbx1"
                        ]
                    },
                    "description": "Allows you to fetch records that are currently visible within a specific view.\n\nViews:\n* vw7cn9e0z2isrbx1 - Default view",
                    "name": "viewId",
                    "in": "query",
                    "required": false
                }
            ],
            "get": {
                "summary": "AccountBalances count",
                "operationId": "accountbalances-count",
                "description": "Get rows count of a table by applying optional filters.",
                "tags": [
                    "AccountBalances"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "count": {
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "list",
                                        "pageInfo"
                                    ]
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "count": 3
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                }
            }
        },
        "/api/v2/tables/m533c9u4tlmxqen/records": {
            "get": {
                "summary": "Users list",
                "operationId": "users-db-table-row-list",
                "description": "List of all rows from Users table and response data fields can be filtered based on query params.",
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string",
                            "enum": [
                                "vwefgjj8o930hopb"
                            ]
                        },
                        "description": "Allows you to fetch records that are currently visible within a specific view.\n\nViews:\n* vwefgjj8o930hopb - Default view",
                        "name": "viewId",
                        "in": "query",
                        "required": false
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1
                        },
                        "in": "query",
                        "name": "shuffle",
                        "description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
                        "example": 0
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UsersResponse"
                                            }
                                        },
                                        "PageInfo": {
                                            "$ref": "#/components/schemas/Paginated"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Users create",
                "description": "Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value.",
                "operationId": "users-create",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UsersResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "tags": [
                    "Users"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/UsersRequest"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/UsersRequest"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Users update",
                "operationId": "users-update",
                "description": "Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "tags": [
                    "Users"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/UsersRequest"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/UsersRequest"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Users delete",
                "operationId": "users-delete",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "Users"
                ],
                "description": "Delete a row by using the **primary key** column value.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/UsersIdRequest"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/UsersIdRequest"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/tables/m533c9u4tlmxqen/records/{recordId}": {
            "get": {
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "name": "recordId",
                        "in": "path",
                        "required": true,
                        "example": 1,
                        "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    }
                ],
                "summary": "Users read",
                "description": "Read a row data by using the **primary key** column value.",
                "operationId": "users-read",
                "tags": [
                    "Users"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UsersResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/tables/m533c9u4tlmxqen/records/count": {
            "parameters": [
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "vwefgjj8o930hopb"
                        ]
                    },
                    "description": "Allows you to fetch records that are currently visible within a specific view.\n\nViews:\n* vwefgjj8o930hopb - Default view",
                    "name": "viewId",
                    "in": "query",
                    "required": false
                }
            ],
            "get": {
                "summary": "Users count",
                "operationId": "users-count",
                "description": "Get rows count of a table by applying optional filters.",
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "count": {
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "list",
                                        "pageInfo"
                                    ]
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "count": 3
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                }
            }
        },
        "/api/v2/tables/m533c9u4tlmxqen/links/{linkFieldId}/records/{recordId}": {
            "parameters": [
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "c026m1ppiz3g05d",
                            "c5hj4dd02rwdstp",
                            "cfmceywc6em4ud2",
                            "cx7azqgf82z4qja"
                        ]
                    },
                    "name": "linkFieldId",
                    "in": "path",
                    "required": true,
                    "description": "**Links Field Identifier** corresponding to the relation field `Links` established between tables.\n\nLink Columns:\n* c026m1ppiz3g05d - Accounts\n* c5hj4dd02rwdstp - Budgets\n* cfmceywc6em4ud2 - Categories\n* cx7azqgf82z4qja - Debts"
                },
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "recordId",
                    "in": "path",
                    "required": true,
                    "example": 1,
                    "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                }
            ],
            "get": {
                "summary": "Link Records list",
                "operationId": "users-nested-list",
                "description": "This API endpoint allows you to retrieve list of linked records for a specific `Link field` and `Record ID`. The response is an array of objects containing Primary Key and its corresponding display value.",
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "list": {
                                            "type": "array",
                                            "description": "List of data objects",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "pageInfo": {
                                            "$ref": "#/components/schemas/Paginated",
                                            "description": "Paginated Info"
                                        }
                                    },
                                    "required": [
                                        "list",
                                        "pageInfo"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                }
            },
            "post": {
                "summary": "Link Records",
                "operationId": "users-nested-link",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "examples": {
                                    "Example 1": {
                                        "value": true
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "tags": [
                    "Users"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "object"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "type": "object"
                                        }
                                    }
                                ]
                            },
                            "examples": {
                                "Example 1": {
                                    "value": [
                                        {
                                            "Id": 4
                                        },
                                        {
                                            "Id": 5
                                        }
                                    ]
                                },
                                "Example 2": {
                                    "value": {
                                        "Id": 4
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "This API endpoint allows you to link records to a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for linking purposes. Note that any existing links, if present, will be unaffected during this operation.",
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "name": "recordId",
                        "in": "path",
                        "required": true,
                        "example": 1,
                        "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                    }
                ]
            },
            "delete": {
                "summary": "Unlink Records",
                "operationId": "users-nested-unlink",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "examples": {
                                    "Example 1": {
                                        "value": true
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "tags": [
                    "Users"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "array",
                                        "items": {
                                            "type": "object"
                                        }
                                    }
                                ]
                            },
                            "examples": {
                                "Example 1": {
                                    "value": [
                                        {
                                            "Id": 1
                                        },
                                        {
                                            "Id": 2
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "This API endpoint allows you to unlink records from a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for unlinking purposes. Note that, \n- duplicated record-ids will be ignored.\n- non-existent record-ids will be ignored.",
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "name": "recordId",
                        "in": "path",
                        "required": true,
                        "example": 1,
                        "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "Paginated": {
                "title": "Paginated",
                "type": "object",
                "properties": {
                    "pageSize": {
                        "type": "integer"
                    },
                    "totalRows": {
                        "type": "integer"
                    },
                    "isFirstPage": {
                        "type": "boolean"
                    },
                    "isLastPage": {
                        "type": "boolean"
                    },
                    "page": {
                        "type": "number"
                    }
                }
            },
            "Attachment": {
                "title": "Attachment",
                "type": "object",
                "properties": {
                    "mimetype": {
                        "type": "string"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "title": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string"
                    }
                }
            },
            "Groupby": {
                "title": "Groupby",
                "type": "object",
                "properties": {
                    "count": {
                        "type": "number",
                        "description": "count"
                    },
                    "column_name": {
                        "type": "string",
                        "description": "the value of the given column"
                    }
                }
            },
            "AccountsResponse": {
                "title": "Accounts Response",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "AccountId": {
                        "type": "integer"
                    },
                    "AccountName": {
                        "type": "string"
                    },
                    "CreatedDate": {
                        "type": "string"
                    },
                    "Transactions": {
                        "type": "number"
                    },
                    "Users": {
                        "$ref": "#/components/schemas/UsersRequest"
                    }
                }
            },
            "AccountsRequest": {
                "title": "Accounts Request",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "AccountName": {
                        "type": "string"
                    },
                    "CreatedDate": {
                        "type": "string"
                    }
                }
            },
            "AccountsIdRequest": {
                "title": "Accounts Id Request",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "AccountId": {
                        "type": "integer"
                    }
                }
            },
            "BudgetsResponse": {
                "title": "Budgets Response",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "Amount": {
                        "type": "number",
                        "format": "float"
                    },
                    "BudgetId": {
                        "type": "integer"
                    },
                    "BudgetPeriod": {
                        "type": "string"
                    },
                    "StartDate": {
                        "type": "string"
                    },
                    "EndDate": {
                        "type": "string"
                    },
                    "Categories": {
                        "$ref": "#/components/schemas/CategoriesRequest"
                    },
                    "Users": {
                        "$ref": "#/components/schemas/UsersRequest"
                    }
                }
            },
            "BudgetsRequest": {
                "title": "Budgets Request",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "Amount": {
                        "type": "number",
                        "format": "float"
                    },
                    "BudgetPeriod": {
                        "type": "string"
                    },
                    "StartDate": {
                        "type": "string"
                    },
                    "EndDate": {
                        "type": "string"
                    }
                }
            },
            "BudgetsIdRequest": {
                "title": "Budgets Id Request",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "BudgetId": {
                        "type": "integer"
                    }
                }
            },
            "CategoriesResponse": {
                "title": "Categories Response",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "CategoryId": {
                        "type": "integer"
                    },
                    "CategoryName": {
                        "type": "string"
                    },
                    "CategoryType": {
                        "type": "string"
                    },
                    "Transactions": {
                        "type": "number"
                    },
                    "Categories": {
                        "$ref": "#/components/schemas/CategoriesRequest"
                    },
                    "Budgets": {
                        "type": "number"
                    },
                    "Users": {
                        "$ref": "#/components/schemas/UsersRequest"
                    }
                }
            },
            "CategoriesRequest": {
                "title": "Categories Request",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "CategoryName": {
                        "type": "string"
                    },
                    "CategoryType": {
                        "type": "string"
                    }
                }
            },
            "CategoriesIdRequest": {
                "title": "Categories Id Request",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "CategoryId": {
                        "type": "integer"
                    }
                }
            },
            "DebtsResponse": {
                "title": "Debts Response",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "Amount": {
                        "type": "number",
                        "format": "float"
                    },
                    "Balance": {
                        "type": "number",
                        "format": "float"
                    },
                    "Notes": {
                        "type": "string"
                    },
                    "DebtId": {
                        "type": "integer"
                    },
                    "LenderOrBorrower": {
                        "type": "string"
                    },
                    "DebtType": {
                        "type": "string"
                    },
                    "DebtDate": {
                        "type": "string"
                    },
                    "Users": {
                        "$ref": "#/components/schemas/UsersRequest"
                    }
                }
            },
            "DebtsRequest": {
                "title": "Debts Request",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "Amount": {
                        "type": "number",
                        "format": "float"
                    },
                    "Balance": {
                        "type": "number",
                        "format": "float"
                    },
                    "Notes": {
                        "type": "string"
                    },
                    "LenderOrBorrower": {
                        "type": "string"
                    },
                    "DebtType": {
                        "type": "string"
                    },
                    "DebtDate": {
                        "type": "string"
                    }
                }
            },
            "DebtsIdRequest": {
                "title": "Debts Id Request",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "DebtId": {
                        "type": "integer"
                    }
                }
            },
            "TransactionsResponse": {
                "title": "Transactions Response",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "Amount": {
                        "type": "number",
                        "format": "float"
                    },
                    "Notes": {
                        "type": "string"
                    },
                    "TransactionId": {
                        "type": "integer"
                    },
                    "TransactionType": {
                        "type": "string"
                    },
                    "TransactionDate": {
                        "type": "string"
                    },
                    "Accounts": {
                        "$ref": "#/components/schemas/AccountsRequest"
                    },
                    "Categories": {
                        "$ref": "#/components/schemas/CategoriesRequest"
                    }
                }
            },
            "TransactionsRequest": {
                "title": "Transactions Request",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "Amount": {
                        "type": "number",
                        "format": "float"
                    },
                    "Notes": {
                        "type": "string"
                    },
                    "TransactionType": {
                        "type": "string"
                    },
                    "TransactionDate": {
                        "type": "string"
                    }
                }
            },
            "TransactionsIdRequest": {
                "title": "Transactions Id Request",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "TransactionId": {
                        "type": "integer"
                    }
                }
            },
            "AccountBalancesResponse": {
                "title": "AccountBalances Response",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "AccountId": {
                        "type": "integer"
                    },
                    "AccountName": {
                        "type": "string"
                    },
                    "Balance": {
                        "type": "number",
                        "format": "float"
                    }
                }
            },
            "AccountBalancesRequest": {
                "title": "AccountBalances Request",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "AccountId": {
                        "type": "integer"
                    },
                    "AccountName": {
                        "type": "string"
                    },
                    "Balance": {
                        "type": "number",
                        "format": "float"
                    }
                }
            },
            "AccountBalancesIdRequest": {
                "title": "AccountBalances Id Request",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {}
            },
            "UsersResponse": {
                "title": "Users Response",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "Username": {
                        "type": "string"
                    },
                    "Email": {
                        "type": "string"
                    },
                    "UserId": {
                        "type": "integer"
                    },
                    "PasswordHash": {
                        "type": "string"
                    },
                    "CreatedDate": {
                        "type": "string"
                    },
                    "LastLoginDate": {
                        "type": "string"
                    },
                    "MultiFactorEnabled": {
                        "type": "boolean"
                    },
                    "Accounts": {
                        "type": "number"
                    },
                    "Budgets": {
                        "type": "number"
                    },
                    "Categories": {
                        "type": "number"
                    },
                    "Debts": {
                        "type": "number"
                    }
                }
            },
            "UsersRequest": {
                "title": "Users Request",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "Username": {
                        "type": "string"
                    },
                    "Email": {
                        "type": "string"
                    },
                    "PasswordHash": {
                        "type": "string"
                    },
                    "CreatedDate": {
                        "type": "string"
                    },
                    "LastLoginDate": {
                        "type": "string"
                    },
                    "MultiFactorEnabled": {
                        "type": "boolean"
                    }
                }
            },
            "UsersIdRequest": {
                "title": "Users Id Request",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "UserId": {
                        "type": "integer"
                    }
                }
            }
        },
        "securitySchemes": {
            "xcAuth": {
                "type": "apiKey",
                "in": "header",
                "name": "xc-auth",
                "description": "JWT access token"
            },
            "xcToken": {
                "type": "apiKey",
                "in": "header",
                "name": "xc-token",
                "description": "API token"
            }
        },
        "responses": {
            "BadRequest": {
                "description": "BadRequest",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "msg": {
                                    "type": "string",
                                    "x-stoplight": {
                                        "id": "p9mk4oi0hbihm"
                                    },
                                    "example": "BadRequest [Error]: <ERROR MESSAGE>"
                                }
                            },
                            "required": [
                                "msg"
                            ]
                        },
                        "examples": {
                            "Example 1": {
                                "value": {
                                    "msg": "BadRequest [Error]: <ERROR MESSAGE>"
                                }
                            }
                        }
                    }
                },
                "headers": {}
            }
        }
    },
    "security": [
        {
            "xcAuth": []
        },
        {
            "xcToken": []
        }
    ]
}